{"version":3,"sources":["components/RealmApp.js","SignOutButton.js","HomePageNavBar.js","Footer.js","HomePageHiveTile.js","TextInput.js","validate.js","graphql-operations.js","AddHiveMutation.js","NewHiveForm.js","RenderTileData.js","HomePage.js","AccountPageNavBar.js","DeleteHiveModal.js","GetCreationDate.js","getUpdateTime.js","EditHiveMutation.js","EditHiveForm.js","EditHiveModal.js","RenderTableData.js","AccountPage.js","HivePageNavBar.js","HivePage.js","Examples/graphqlExamples.js","BeeMinderApp.js","components/LoginPageNavBar.js","components/LoginScreen.js","components/RealmApolloProvider.js","index.js"],"names":["RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","useState","Realm","setApp","useEffect","currentUser","setCurrentUser","credentials","a","logIn","logOut","wrapped","Provider","value","SignOutButton","props","Button","color","onClick","HomePageNavBar","state","SignOutModal","Collapsed","toggleNavbar","bind","toggleSignOutModal","currentState","this","setState","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","isOpen","navbar","Nav","className","NavItem","to","outline","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Component","Footer","dark","NavbarText","HomePageHiveTile","hiveID","hiveName","report","temperature","sensor_data","temp","humidity","weight","lastUpdated","time_recorded","month","substr","day","year","hour","Number","String","AMPM","minute","second","Card","CardHeader","CardTitle","CardText","CardBody","CardFooter","window","location","reload","pathname","hiveTitle","TextInput","formControl","touched","valid","type","minLengthValidator","minLength","length","requiredValidator","trim","emailValidator","test","toLowerCase","validate","rules","isValid","rule","FIND_HIVE","gql","FIND_HIVES","UPDATE_HIVE","CREATE_HIVE","DELETE_HIVE","AddHiveMutation","userID","_id","useMutation","createHive","createNewHive","variables","data","_owner","created","Date","toISOString","identifier","name","reports","link","create","submitted","disabled","NewHiveForm","changeHandler","event","target","updatedControls","formControls","updatedFormElement","validationRules","formIsValid","inputIdentifier","HiveName","placeholder","isRequired","HiveID","onSubmitForm","formData","formElementId","onFormSubmit","onChange","RenderTileData","console","log","hiveSearchText","useQuery","query","hivesData","loading","hives","modal","setModal","CardDeck","map","style","close","HomePage","NewHiveModal","submitForm","toggleNewHiveModal","values","Jumbotron","Container","AccountPageNavBar","DeleteHiveModal","deleteHive","deleteHiveNameText","setDeleteHiveNameText","deleteOldHive","GetCreationDate","date","GetUpdateTime","EditHiveMutation","updateHive","newHiveName","updateHiveName","oldHiveName","set","EditHiveForm","EditHiveModal","RenderTableData","Table","hover","key","index","toUpperCase","AccountPage","setHiveSearchText","Row","Col","HivePageNavBar","HivePage","hiveData","hive","temp_status","temp_status_color","humidity_status","humidity_status_color","weight_status","weight_status_color","scope","GQLExamples","hiveLoading","updatingHive","newHiveNameText","setNewHiveNameText","insertingHive","createHiveNameText","setCreateHiveNameText","e","BeeMinderApp","exact","path","component","LoginPageNavBar","LoginScreen","eye","icon","faEye","pressed","setPressed","mode","setMode","email","setEmail","password","setPassword","error","setError","passwordShown","setPasswordShown","isLoggingIn","setIsLoggingIn","handleLogin","emailPassword","handleAuthenticationError","handleRegistrationAndLogin","emailPasswordAuth","registerUser","err","backgroundColor","Spinner","Input","label","errorMessage","position","preventDefault","oldMode","parts","message","split","reason","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","createRealmApolloClient","HttpLink","uri","id","fetch","options","refreshCustomData","headers","Authorization","accessToken","cache","InMemoryCache","ApolloClient","RealmApolloProvider","client","setClient","APP_ID","RequireLoggedInUser","ReadcDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30382946.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst RealmAppContext = React.createContext();\r\n\r\nexport const useRealmApp = () => {\r\n  const app = React.useContext(RealmAppContext);\r\n  if (!app) {\r\n    throw new Error(\r\n      `You must call useRealmApp() inside of a <RealmAppProvider />`\r\n    );\r\n  }\r\n  return app;\r\n};\r\n\r\nexport const RealmAppProvider = ({ appId, children }) => {\r\n   // Wrap the Realm.App object with React state.\r\n   const [app, setApp] = React.useState(new Realm.App(appId));\r\n  React.useEffect(() => {\r\n    setApp(new Realm.App(appId));\r\n  }, [appId]);\r\n  \r\n  // Wrap the Realm.App object's user state with React state\r\n  const [currentUser, setCurrentUser] = React.useState(app.currentUser);\r\n  async function logIn(credentials) {\r\n    // Call the logIn() method with the given credentials\r\n    await app.logIn(credentials);\r\n    // If successful, app.currentUser is the user that just logged in\r\n    setCurrentUser(app.currentUser);\r\n  }\r\n  async function logOut() {\r\n    // Log out the currently active user\r\n    // Call the logOut() method on the current user. \r\n    await app.currentUser?.logOut();\r\n    // If another user was logged in too, they're now the current user.\r\n    // Otherwise, app.currentUser is null.\r\n    // Call the setCurrentUser() method on the app's current user.\r\n    setCurrentUser(app.currentUser);\r\n  }\r\n\r\n  const wrapped = { ...app, currentUser, logIn, logOut };\r\n  \r\n  return (\r\n    <RealmAppContext.Provider value={wrapped}>\r\n      {children}\r\n    </RealmAppContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { useRealmApp } from './components/RealmApp'\r\n\r\nfunction SignOutButton(props){\r\n\tconst app = useRealmApp();\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button color=\"primary\" onClick={() => {app.logOut();}}>Sign Out</Button>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SignOutButton;","import React, { Component } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport {Link } from \"react-router-dom\";\r\nimport SignOutButton from './SignOutButton';\r\n\r\nclass HomePageNavBar extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tSignOutModal: false,\r\n\t\t\tCollapsed: false\r\n\t\t};\r\n\t\tthis.toggleNavbar = this.toggleNavbar.bind(this);\r\n\t\tthis.toggleSignOutModal = this.toggleSignOutModal.bind(this);\r\n\t}\r\n\t\r\n\ttoggleNavbar() {\r\n\t\tconst currentState = this.state.Collapsed;\r\n\t\tthis.setState({ Collapsed: !currentState });\r\n\t}\r\n\t\r\n\ttoggleSignOutModal() {\r\n\t\tconst currentState = this.state.SignOutModal;\r\n\t\tthis.setState({ SignOutModal: !currentState });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Navbar color=\"warning\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarBrand href=\"/\">BeeMinder</NavbarBrand>\r\n\t\t\t\t\t<NavbarToggler onClick={this.toggleNavbar} />\r\n\t\t\t\t\t<Collapse isOpen={this.state.Collapsed} navbar>\r\n\t\t\t\t\t\t<Nav className=\"mr-auto\" navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Link to=\"/MyAccount\"><Button color=\"link\" outline=\"false\">My Hives</Button></Link>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t<Button color=\"link\" outline=\"false\" onClick={this.toggleSignOutModal}>Sign Out</Button>\r\n\t\t\t\t\t\t\t<Modal isOpen={this.state.SignOutModal} toggle={this.toggleSignOutModal} className={this.className}>\r\n\t\t\t\t\t\t\t\t<ModalHeader toggle={this.toggleSignOutModal}>Sign Out</ModalHeader>\r\n\t\t\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t\t\t<p>Are you sure you want to sign out?</p>\r\n\t\t\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t\t\t\t<SignOutButton />{' '}\r\n\t\t\t\t\t\t\t\t\t<Button color=\"secondary\" onClick={this.toggleSignOutModal}>Cancel</Button>\r\n\t\t\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</Navbar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default HomePageNavBar;\r\n","import React from 'react';\r\nimport { Navbar, NavbarText } from 'reactstrap';\r\n\r\nconst Footer = (props) => {\r\n\treturn (\r\n\t\t<div>  \r\n\t\t\t<Navbar color=\"secondary\" dark>\r\n\t\t\t\t<NavbarText>BeeMinder 2020</NavbarText>\r\n\t\t\t</Navbar>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Card, CardText, CardBody, CardHeader,CardTitle, CardFooter, Button} from 'reactstrap';\r\nimport {Link } from \"react-router-dom\";\r\n\r\nfunction HomePageHiveTile(props) {\r\n\t\r\n\tconst hiveID = props.hiveID;\r\n\tconst hiveName = props.hiveName;\r\n\r\n\tconst report = props.report;\r\n\t\r\n\tconst temperature = report ? report.sensor_data.temp : \"0\";\r\n\tconst humidity = report ? report.sensor_data.humidity : \"0\";\r\n\tconst weight = report ? report.sensor_data.weight : \"0\";\r\n\t\r\n\tconst lastUpdated = report ? report.time_recorded : \"0000-00-00T00:00:00Z\";\r\n\tconst month = lastUpdated.substr(5, 2);\r\n\tconst day = lastUpdated.substr(8, 2);\r\n\tconst year = lastUpdated.substr(0, 2);\r\n\tconst hour = Number(lastUpdated.substr(11, 2)) === 0 ? \"12\":\r\n\t\t\t\t Number(lastUpdated.substr(11, 2)) > 12 ? String(Number(lastUpdated.substr(11, 2))-12) : lastUpdated.substr(11, 2);\r\n\tconst AMPM = Number(lastUpdated.substr(11, 2)) > 12 ? \"PM\" : \"AM\";\r\n\tconst minute = lastUpdated.substr(14, 2);\r\n\tconst second = lastUpdated.substr(17, 2);\r\n\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Card outline color=\"secondary\">\r\n\t\t\t\t<CardHeader>\r\n\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t<CardTitle>{hiveName}</CardTitle>\r\n\t\t\t\t\t</h2>\r\n\t\t\t\t\t<CardText>Last Update: {month}/{day}/{year} at {hour}:{minute}:{second} {AMPM}</CardText>\r\n\t\t\t\t</CardHeader>\r\n\t\t\t\t<CardBody>\r\n\t\t\t\t\t<CardText>Hive ID: {hiveID}</CardText>\r\n\t\t\t\t\t<CardText>Temperature: {temperature}°F</CardText>\r\n\t\t\t\t\t<CardText>Humidity: {humidity}%</CardText>\r\n\t\t\t\t\t<CardText>Weight: {weight} lbs</CardText>\r\n\t\t\t\t</CardBody>\r\n\t\t\t\t<CardFooter>\r\n\t\t\t\t\t<Button color=\"primary\" onClick={() => window.location.reload(false)}>Get Hive Update</Button>  <Link to={{pathname: '/MyHive', hiveTitle:hiveName}}><Button color=\"success\">Go To Hive</Button></Link>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t</CardFooter>\r\n\t\t\t</Card>\r\n\t\t\t<br/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default HomePageHiveTile;\r\n","import React from 'react';\r\n\r\nconst TextInput = props => {\r\n\r\n    let formControl = \"form-control\";\r\n\r\n    if (props.touched && !props.valid) {\r\n        formControl = 'form-control control-error';\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <input type=\"text\" className={formControl} {...props} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextInput;","const validate = (value, rules) => {\r\n  let isValid = true;\r\n  \r\n  for (let rule in rules) {\r\n  \r\n    switch (rule) {\r\n      \tcase 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]); break;\r\n        \r\n        case 'isRequired': isValid = isValid && requiredValidator(value); break;\r\n\t\t    \r\n        case 'isEmail': isValid = isValid && emailValidator(value); break;\r\n        \r\n      \tdefault: isValid = true;\r\n    }\r\n\r\n  }\r\n  \r\n  return isValid;\r\n}\r\n\r\n\r\n/**\r\n * minLength Val\r\n * @param  value \r\n * @param  minLength\r\n * @return          \r\n */\r\nconst minLengthValidator = (value, minLength) => {\r\n    return value.length >= minLength;\r\n}\r\n\r\n/**\r\n * Check to confirm that feild is required\r\n * \r\n * @param  value \r\n * @return       \r\n */\r\nconst requiredValidator = value => {\r\n    return value.trim() !== '';\t\r\n}\r\n\r\n/**\r\n * Email validation\r\n * \r\n * @param value\r\n * @return \r\n */\r\nconst emailValidator = value => {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(value).toLowerCase());\r\n}\r\n\r\n\r\n\r\nexport default validate;","import { gql } from '@apollo/client';\r\n\r\nexport const FIND_HIVE = gql`\r\nquery FindHive($query: HiveQueryInput!) {\r\n\thive(query: $query) {\r\n\t\t_id\r\n\t\t_owner\r\n\t\tcreated\r\n\t\tidentifier\r\n\t\tname\r\n\t\treports {\r\n\t\t\t_id\r\n\t\t\ttime_recorded\r\n\t\t\tsensor_data {\r\n\t\t\t\ttemp\r\n\t\t\t\thumidity\r\n\t\t\t\tweight\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n`;\r\n\r\nexport const FIND_HIVES = gql`\r\nquery FindHive($query: HiveQueryInput!) {\r\n\thives(query: $query) {\r\n\t\t_id\r\n\t\t_owner\r\n\t\tcreated\r\n\t\tidentifier\r\n\t\tname\r\n\t\treports {\r\n\t\t\t_id\r\n\t\t\ttime_recorded\r\n\t\t\tsensor_data {\r\n\t\t\t\ttemp\r\n\t\t\t\thumidity\r\n\t\t\t\tweight\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n`;\r\n\r\nexport const UPDATE_HIVE = gql`\r\n  mutation UpdateHive($query: HiveQueryInput!, $set: HiveUpdateInput!) {\r\n    updateOneHive(query: $query, set: $set) {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_HIVE = gql`\r\n  mutation CreateHiveHive($data: HiveInsertInput!) {\r\n    insertOneHive(data: $data) {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_HIVE = gql`\r\n  mutation DeleteHiveHive($query: HiveQueryInput!) {\r\n    deleteOneHive(query: $query) {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;","import * as React from \"react\"\r\n// Apollo imports\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CREATE_HIVE } from \"./graphql-operations\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useRealmApp } from \"./components/RealmApp\";\r\n\r\nfunction AddHiveMutation(props) {\r\n\tconst app = useRealmApp();\r\n\tconst userID = app.currentUser._id\r\n\r\n  // logic for create hive mutation\r\n  const [createHive] = useMutation(CREATE_HIVE);\r\n  const createNewHive = async () => {\r\n    if (!props.hiveName) return;\r\n    await createHive({\r\n      variables: {\r\n        data: {\r\n          _owner: userID,\r\n          created: (new Date()).toISOString(),\r\n          identifier: props.hiveID,\r\n          name: props.hiveName,\r\n          reports: {\r\n            link:[],\r\n            create:[]\r\n          }\r\n        }\r\n      }\r\n    })\r\n\twindow.location.reload(false);\r\n  }\r\n  \r\n  const submitForm = () => {\r\n\tprops.submitted();\r\n  }\r\n  \r\n  const valid = props.hiveName && props.hiveID ? true : false;\r\n  \r\n  return (\r\n    <div> \r\n        <Button color = \"primary\" onClick={()=>{createNewHive(); submitForm()}} disabled={!valid}>Submit</Button>\r\n    </div>)\r\n};\r\n\r\nexport default AddHiveMutation;","import React, { Component } from 'react';\r\nimport TextInput from './TextInput';\r\nimport validate from './validate';\r\nimport AddHiveMutation from './AddHiveMutation';\r\n\r\nclass NewHiveForm extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tformIsValid: false,\r\n\t\t\tformControls: {\r\n\t\t\t\t\r\n\t\t\t\tHiveName: {\r\n\t\t\t\t\tvalue: '',\r\n\t\t\t\t\tplaceholder: 'Hive Name',\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tvalidationRules: {\r\n\t\t\t\t\t\tminLength: 5,\r\n\t\t\t\t\t\tisRequired: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttouched: false\r\n\t\t\t\t},  \r\n\t\t\t\tHiveID: {\r\n\t\t\t\t\tvalue: '',\r\n\t\t\t\t\tplaceholder: 'BeeMinder System ID Number',\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tvalidationRules: {\r\n\t\t\t\t\t\tminLength: 6,\r\n\t\t\t\t\t\tisRequired: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttouched: false\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.onSubmitForm = this.onSubmitForm.bind(this);\r\n\t}\r\n\t\r\n\r\n\tchangeHandler = event => {\r\n\t\t\r\n\t\tconst name = event.target.name;\r\n\t\tconst value = event.target.value;\r\n\r\n\t\tconst updatedControls = {\r\n\t\t\t...this.state.formControls\r\n\t\t};\r\n\t\tconst updatedFormElement = {\r\n\t\t\t...updatedControls[name]\r\n\t\t};\r\n\t\tupdatedFormElement.value = value;\r\n\t\tupdatedFormElement.touched = true;\r\n\t\tupdatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n\r\n\t\tupdatedControls[name] = updatedFormElement;\r\n\r\n\t\tlet formIsValid = true;\r\n\t\tfor (let inputIdentifier in updatedControls) {\r\n\t\t\tformIsValid = updatedControls[inputIdentifier].valid && formIsValid;\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tformControls: updatedControls,\r\n\t\t\tformIsValid: formIsValid\r\n\t\t});\r\n\r\n\t}\r\n\t  \r\n\t  \r\n\tonSubmitForm() {\r\n\t\tconst formData = {};\r\n\t\tfor (let formElementId in this.state.formControls) {\r\n\t\t\tformData[formElementId] = this.state.formControls[formElementId].value;\r\n\t\t}\r\n\t\tthis.props.onFormSubmit(formData);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className = \"App\">\r\n\t\t\t\t<TextInput name=\"HiveName\"\r\n\t\t\t\t\tplaceholder={this.state.formControls.HiveName.placeholder}\r\n\t\t\t\t\tvalue={this.state.formControls.HiveName.value}\r\n\t\t\t\t\tonChange={this.changeHandler}\r\n\t\t\t\t\ttouched={this.state.formControls.HiveName.touched}\r\n\t\t\t\t\tvalid={this.state.formControls.HiveName.valid}\r\n\t\t\t\t/>\r\n\t\t\t\t\t  \r\n\t\t\t\t<TextInput name=\"HiveID\"\r\n\t\t\t\t\tplaceholder={this.state.formControls.HiveID.placeholder}\r\n\t\t\t\t\tvalue={this.state.formControls.HiveID.value}\r\n\t\t\t\t\tonChange={this.changeHandler}\r\n\t\t\t\t\ttouched={this.state.formControls.HiveID.touched}\r\n\t\t\t\t\tvalid={this.state.formControls.HiveID.valid}\r\n\t\t\t\t/>\r\n\t\t\t\t<AddHiveMutation hiveName = {this.state.formControls.HiveName.value} hiveID = {this.state.formControls.HiveID.value} submitted={this.onSubmitForm}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NewHiveForm;","import React, { useState } from 'react'\r\nimport { CardDeck, CardBody, Button, Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { useRealmApp } from \"./components/RealmApp\";\r\nimport HomePageHiveTile from \"./HomePageHiveTile\";\r\nimport NewHiveForm from \"./NewHiveForm\";\r\n//Apollo Imports\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { FIND_HIVES } from \"./graphql-operations\";\r\n\r\n\r\nfunction RenderTileData (props) {\r\n\tconst app = useRealmApp();\r\n\tconst userID = app.currentUser._id\r\n\tconsole.log(userID);\r\n    const [hiveSearchText, setHiveSearchText] = useState(userID);\r\n\tconst { loading: hivesLoading, data: hivesData } = useQuery(FIND_HIVES, {\r\n\t\tvariables: { query: { _owner: hiveSearchText } }\r\n\t});\r\n\t\r\n\tconst hives = hivesData ? hivesData.hives : null;\r\n\r\n    const renderBody = () => {\r\n        return hives ? (hives && hives.map(({ name, identifier, reports }) => {\r\n            return (\r\n                <HomePageHiveTile hiveName = {name} hiveID = {identifier} report = {reports[0]} />\r\n            )\r\n        })) : <p style={{\"color\":\"red\", \"fontSize\":20}}>No Hives to Show. Use the \"+ New Hive\" Button to add a hive.</p>\r\n    }\r\n\t\r\n\tconst [modal, setModal] = useState(false);\r\n\tconst toggle = () => setModal(!modal);\r\n\r\n    return (\r\n        <div>\r\n\t\t\t<CardDeck>\r\n\t\t\t\t{renderBody()}\r\n\t\t\t\t<CardBody>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<Button color = \"success\" onClick={() => toggle()}>+ New Hive</Button>\r\n\t\t\t\t\t<Modal isOpen={modal} toggle={toggle} className={props.className}>\r\n\t\t\t\t\t\t<ModalHeader toggle={toggle} close={<button className=\"close\" onClick={toggle}>&times;</button>}>Add a New Hive</ModalHeader>\r\n\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t<NewHiveForm/>\r\n\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t</CardBody>\r\n\t\t\t</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default RenderTileData;\r\n","import React, { Component } from 'react';\r\nimport HomePageNavBar from './HomePageNavBar';\r\nimport Footer from './Footer'\r\nimport RenderTileData from './RenderTileData';\r\nimport {Container,Jumbotron} from 'reactstrap';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tNewHiveModal:false,\r\n\t\t};\r\n\t\tthis.submitForm = this.submitForm.bind(this);\r\n\t\tthis.toggleNewHiveModal = this.toggleNewHiveModal.bind(this);\r\n    }\r\n\t\r\n\tsubmitForm(values) {\r\n\t\tthis.setState({ values, NewHiveModal:false });\r\n\t}\r\n\t\r\n\ttoggleNewHiveModal() {\r\n\t\tconst currentState = this.state.NewHiveModal;\r\n\t\tthis.setState({ NewHiveModal: !currentState });\r\n\t}\r\n\t\r\n    render() {\r\n        return (\r\n            <div>\r\n\t\t\t\t<HomePageNavBar />\r\n                <Jumbotron>\r\n                    <h1 className=\"display-3\">Welcome to BeeMinder</h1>\r\n\t\t\t\t\t<p className=\"lead\">This is the homepage where you can see a all of your hives at a glance.</p>\r\n\t\t\t\t\t<hr className=\"my-2\" />\r\n\t\t\t\t\t<p>To see more information on a specific hive, click on Go To Hive. To navigate around the webpage, use the Navigation Bar at the top of the page.</p>\r\n                </Jumbotron>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<RenderTileData />\r\n\t\t\t\t</Container>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport {Link } from \"react-router-dom\";\r\nimport SignOutButton from './SignOutButton'\r\n\r\nclass AccountPageNavBar extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tSignOutModal: false,\r\n\t\t\tCollapsed: false\r\n\t\t};\r\n\t\tthis.toggleNavbar = this.toggleNavbar.bind(this);\r\n\t\tthis.toggleSignOutModal = this.toggleSignOutModal.bind(this);\r\n\t}\r\n\r\n\ttoggleNavbar() {\r\n\t\tconst currentState = this.state.Collapsed;\r\n\t\tthis.setState({ Collapsed: !currentState });\r\n\t}\r\n\t\r\n\ttoggleSignOutModal() {\r\n\t\tconst currentState = this.state.SignOutModal;\r\n\t\tthis.setState({ SignOutModal: !currentState });\r\n\t}\r\n\t\r\n\trender() {\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Navbar color=\"warning\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarBrand href=\"/\">BeeMinder</NavbarBrand>\r\n\t\t\t\t\t<NavbarToggler onClick={this.toggleNavbar} />\r\n\t\t\t\t\t<Collapse isOpen={this.state.Collapsed} navbar>\r\n\t\t\t\t\t\t<Nav className=\"mr-auto\" navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Link to=\"/\"><Button color=\"link\" outline=\"false\">Home Page</Button></Link>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t<Button color=\"link\" outline=\"false\" onClick={this.toggleSignOutModal}>Sign Out</Button>\r\n\t\t\t\t\t\t\t<Modal isOpen={this.state.SignOutModal} toggle={this.toggleSignOutModal} className={this.className}>\r\n\t\t\t\t\t\t\t\t<ModalHeader toggle={this.toggleSignOutModal}>Sign Out</ModalHeader>\r\n\t\t\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t\t\t<p>Are you sure you want to sign out?</p>\r\n\t\t\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t\t\t\t<SignOutButton />{' '}\r\n\t\t\t\t\t\t\t\t\t<Button color=\"secondary\" onClick={this.toggleSignOutModal}>Cancel</Button>\r\n\t\t\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</Navbar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AccountPageNavBar;\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n//Apollo Imports\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_HIVE } from \"./graphql-operations\";\r\n\r\n\r\nfunction DeleteHiveModal (props) {\r\n\tconst {\r\n\t\tclassName,\r\n\t\thiveName\r\n\t} = props;\r\n\t\t\r\n\t\r\n\t//Delete Hive logic\r\n\tconst [deleteHive, { loading: deletingHive }] = useMutation(DELETE_HIVE);\r\n\tconst [deleteHiveNameText, setDeleteHiveNameText] = React.useState(hiveName);\r\n\tconst deleteOldHive = async () => {\r\n\t\tif (!deleteHiveNameText) return;\r\n\t\tawait deleteHive({\r\n\t\t\tvariables: {\r\n\t\t\t\tquery: {\r\n\t\t\t\t\tname: deleteHiveNameText\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\twindow.location.reload(false);\r\n\t}\r\n\t\r\n\t//Modal Controls\r\n\tconst [modal, setModal] = useState(false);\r\n\t\r\n\t//Cancel Button\r\n\tconst toggle = () => setModal(!modal);\r\n\t\r\n\t//Steps to delete the hive\r\n\tconst executeDelete = () => {\r\n\t\tsetModal(!modal);\r\n\t\tsetDeleteHiveNameText(hiveName);\r\n\t\tdeleteOldHive();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button outline color=\"danger\" onClick={toggle}>Delete Hive</Button>\r\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={className}>\r\n\t\t\t\t<ModalHeader toggle={toggle}>Delete Hive?</ModalHeader>\r\n\t\t\t\t<ModalBody>\r\n\t\t\t\t\tAre you sure you want to delete this hive?\t\t\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button color=\"danger\" onClick={() => executeDelete()}>Delete</Button>{' '}\r\n\t\t\t\t\t<Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DeleteHiveModal;","import React from 'react';\r\n\r\nfunction GetCreationDate(props) {\r\n\tconst created = props.date;\r\n\tconst month = created.substr(5, 2);\r\n\tconst day = created.substr(8, 2);\r\n\tconst year = created.substr(0, 2);\r\n\t\r\n\treturn (\r\n\t\t<p>{month}/{day}/{year}</p>\r\n\t);\r\n}\r\n\r\nexport default GetCreationDate;","import React from 'react';\r\n\r\nfunction GetUpdateTime(props) {\r\n\tconst report = props.report;\r\n\tconst lastUpdated = report ? report.time_recorded : \"0000-00-00T00:00:00Z\";\r\n\tconst month = lastUpdated.substr(5, 2);\r\n\tconst day = lastUpdated.substr(8, 2);\r\n\tconst year = lastUpdated.substr(0, 2);\r\n\tconst hour = Number(lastUpdated.substr(11, 2)) === 0 ? \"12\":\r\n\t\t\t\t Number(lastUpdated.substr(11, 2)) > 12 ? String(Number(lastUpdated.substr(11, 2))-12) : lastUpdated.substr(11, 2);\r\n\tconst AMPM = Number(lastUpdated.substr(11, 2)) > 12 ? \"PM\" : \"AM\";\r\n\tconst minute = lastUpdated.substr(14, 2);\r\n\tconst second = lastUpdated.substr(17, 2);\r\n\t\r\n\treturn (\r\n\t\t<p>{month}/{day}/{year} at {hour}:{minute}:{second} {AMPM}</p>\r\n\t);\r\n}\r\n\r\nexport default GetUpdateTime;","import React from \"react\"\r\n// Apollo imports\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UPDATE_HIVE } from \"./graphql-operations\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nfunction EditHiveMutation(props) {\r\n\t\r\n\tconst [updateHive, { loading: updatingHive }] = useMutation(UPDATE_HIVE);\r\n\tconst [newHiveNameText, setNewHiveNameText] = React.useState(props.newHiveName);\r\n\tconst updateHiveName = async () => {\r\n\t\tif (!props.newHiveName) return;\r\n\t\tawait updateHive({\r\n\t\t\tvariables: {\r\n\t\t\t\tquery: { name: props.oldHiveName },\r\n\t\t\t\tset: { name: props.newHiveName }\r\n\t\t\t}\r\n\t\t});\r\n\t\twindow.location.reload(false);\r\n\t};\r\n  \r\n  const valid = props.newHiveName && props.oldHiveName ? true : false;\r\n  \r\n  const submitForm = () => {\r\n\tprops.submitted();\r\n  }\r\n  \r\n  return (\r\n    <div> \r\n        <Button color = \"primary\" onClick={() => {updateHiveName(); submitForm();}} disabled = {!valid}>Submit</Button>\r\n    </div>)\r\n};\r\n\r\nexport default EditHiveMutation;","import React, { Component } from 'react';\r\nimport TextInput from './TextInput';\r\nimport EditHiveMutation from './EditHiveMutation';\r\n\r\nclass EditHiveForm extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tformIsValid: false,\r\n\t\t\toldHiveName: props.hiveName,\r\n\t\t\tformControls: {\r\n\t\t\t\tHiveName: {\r\n\t\t\t\t\tvalue: '',\r\n\t\t\t\t\tplaceholder: props.hiveName,\r\n\t\t\t\t\tvalid: true,\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t\tthis.onSubmitForm = this.onSubmitForm.bind(this);\r\n\t}\r\n\t\r\n\r\n\tchangeHandler = event => {\r\n\t\t\r\n\t\tconst name = event.target.name;\r\n\t\tconst value = event.target.value;\r\n\r\n\t\tconst updatedControls = {\r\n\t\t\t...this.state.formControls\r\n\t\t};\r\n\t\tconst updatedFormElement = {\r\n\t\t\t...updatedControls[name]\r\n\t\t};\r\n\t\tupdatedFormElement.value = value;\r\n\t\tupdatedFormElement.touched = true;\r\n\r\n\t\tupdatedControls[name] = updatedFormElement;\r\n\r\n\t\tlet formIsValid = true;\r\n\t\tfor (let inputIdentifier in updatedControls) {\r\n\t\t\tformIsValid = updatedControls[inputIdentifier].valid && formIsValid;\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tformControls: updatedControls,\r\n\t\t\tformIsValid: formIsValid\r\n\t\t});\r\n\r\n\t}\r\n\t  \r\n\t  \r\n\tonSubmitForm() {\r\n\t\tconst formData = {};\r\n\t\tfor (let formElementId in this.state.formControls) {\r\n\t\t\tformData[formElementId] = this.state.formControls[formElementId].value;\r\n\t\t}\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className = \"App\">\r\n\t\t\t\t<TextInput name=\"HiveName\"\r\n\t\t\t\t\tplaceholder={this.state.formControls.HiveName.placeholder}\r\n\t\t\t\t\tvalue={this.state.formControls.HiveName.value}\r\n\t\t\t\t\tonChange={this.changeHandler}\r\n\t\t\t\t\ttouched={this.state.formControls.HiveName.touched}\r\n\t\t\t\t\tvalid={this.state.formControls.HiveName.valid}\r\n\t\t\t\t/>\r\n\t\t\t\t<EditHiveMutation oldHiveName = {this.state.oldHiveName} newHiveName = {this.state.formControls.HiveName.value} submitted = {this.onSubmitForm}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default EditHiveForm;","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport EditHiveForm from \"./EditHiveForm\";\r\n\r\n\r\nfunction EditHiveModal (props) {\r\n\t//Modal Controls\r\n\tconst [modal, setModal] = useState(false);\r\n\tconst toggle = () => setModal(!modal);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button outline color=\"warning\" onClick={toggle}>Edit Hive</Button>{' '}\r\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={props.className}>\r\n\t\t\t\t<ModalHeader toggle={toggle} close={<button className=\"close\" onClick={toggle}>&times;</button>}>Edit Hive Name</ModalHeader>\r\n\t\t\t\t<ModalBody>\r\n\t\t\t\t\t<EditHiveForm hiveName = {props.hiveName}/>\r\n\t\t\t\t</ModalBody>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default EditHiveModal;","import React, { useState } from 'react'\r\nimport { Table } from 'reactstrap';\r\nimport DeleteHiveModal from './DeleteHiveModal';\r\nimport GetCreationDate from './GetCreationDate';\r\nimport GetUpdateTime from './getUpdateTime';\r\nimport {Link } from \"react-router-dom\";\r\nimport { useRealmApp } from \"./components/RealmApp\";\r\nimport EditHiveModal from \"./EditHiveModal\";\r\n//Apollo Imports\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { FIND_HIVES } from \"./graphql-operations\";\r\n\r\n\r\nfunction RenderTableData (props) {\r\n\tconst app = useRealmApp();\r\n\tconst userID = app.currentUser._id\r\n\t\r\n    const [hiveSearchText, setHiveSearchText] = useState(userID);\r\n\tconst { loading: hivesLoading, data: hivesData } = useQuery(FIND_HIVES, {\r\n\t\tvariables: { query: { _owner: hiveSearchText } }\r\n\t});\r\n\t\r\n\tconst hives = hivesData ? hivesData.hives : null;\r\n\r\n    const renderHeader = () => {\r\n        let headerElement = ['Hive Name', 'Last Updated', 'Date Added', 'Status', '', '']\r\n\r\n        return headerElement.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n\r\n    const renderBody = () => {\r\n        return hives && hives.map(({ name, reports, created }) => {\r\n            return (\r\n                <tr key={name}>\r\n                    <td><Link to={{\r\n\t\t\t\t\t\tpathname: '/MyHive', \r\n\t\t\t\t\t\thiveTitle:name\r\n\t\t\t\t\t}}>{name}</Link>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td><GetUpdateTime report = {reports[0]}/></td>\r\n\t\t\t\t\t<td><GetCreationDate date = {created}/></td>\r\n\t\t\t\t\t<td  style={{ color: 'green' }}>Good</td>\r\n\t\t\t\t\t<td><EditHiveModal hiveName = {name}/></td>\r\n\t\t\t\t\t<td><DeleteHiveModal hiveName = {name}/></td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Table hover>\r\n                <thead>\r\n                    <tr>{renderHeader()}</tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderBody()}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\nexport default RenderTableData;\r\n","import React, { useState } from 'react';\r\nimport AccountPageNavBar from './AccountPageNavBar';\r\nimport Footer from './Footer'\r\nimport {Container,Row,Col,Jumbotron,Button} from 'reactstrap';\r\nimport RenderTableData from './RenderTableData';\r\nimport { useRealmApp } from \"./components/RealmApp\";\r\n//Apollo imports\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { FIND_HIVES } from \"./graphql-operations\";\r\n\r\nfunction AccountPage(props) {\r\n\tconst app = useRealmApp();\r\n\tconst userID = app.currentUser._id\r\n\t\r\n\tconst [hiveSearchText, setHiveSearchText] = useState(userID);\r\n\tconst { loading: hivesLoading, data: hivesData } = useQuery(FIND_HIVES, {\r\n\t\tvariables: { query: { _owner: hiveSearchText } }\r\n\t});\r\n\t\r\n\tconst hives = hivesData ? hivesData.hives : null;\r\n\t\r\n\tconst refresh = () => {\r\n\t\tsetHiveSearchText(userID);\r\n\t\twindow.location.reload(false);\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<AccountPageNavBar />\r\n\t\t\t<Jumbotron color = \"dark\">\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<h1>My Hives</h1>\r\n\t\t\t\t\t\t\t<Button color=\"dark\" onClick={() => refresh()}>Get Lastest Update</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</Jumbotron>\r\n\t\t\t<RenderTableData hives = {hives} />\r\n\t\t\t<Footer />\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default AccountPage;\r\n","import React, { Component } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport {Link } from \"react-router-dom\";\r\nimport SignOutButton from './SignOutButton'\r\n\r\nclass HivePageNavBar extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tSignOutModal: false,\r\n\t\t\tCollapsed: false\r\n\t\t};\r\n\t\tthis.toggleNavbar = this.toggleNavbar.bind(this);\r\n\t\tthis.toggleSignOutModal = this.toggleSignOutModal.bind(this);\r\n\t}\r\n\r\n\ttoggleNavbar() {\r\n\t\tconst currentState = this.state.Collapsed;\r\n\t\tthis.setState({ Collapsed: !currentState });\r\n\t}\r\n\t\r\n\ttoggleSignOutModal() {\r\n\t\tconst currentState = this.state.SignOutModal;\r\n\t\tthis.setState({ SignOutModal: !currentState });\r\n\t}\r\n\t\r\n\trender() {\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Navbar color=\"warning\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarBrand href=\"/\">BeeMinder</NavbarBrand>\r\n\t\t\t\t\t<NavbarToggler onClick={this.toggleNavbar} />\r\n\t\t\t\t\t<Collapse isOpen={this.state.Collapsed} navbar>\r\n\t\t\t\t\t\t<Nav className=\"mr-auto\" navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Link to=\"/\"><Button color=\"link\" outline=\"false\">Home Page</Button></Link>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Link to=\"/MyAccount\"><Button color=\"link\" outline=\"false\">My Hives</Button></Link>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t<Button color=\"link\" outline = \"false\" onClick={this.toggleSignOutModal}>Sign Out</Button>\r\n\t\t\t\t\t\t\t<Modal isOpen={this.state.SignOutModal} toggle={this.toggleSignOutModal} className={this.className}>\r\n\t\t\t\t\t\t\t\t<ModalHeader toggle={this.toggleSignOutModal}>Sign Out</ModalHeader>\r\n\t\t\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t\t\t<p>Are you sure you want to sign out?</p>\r\n\t\t\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t\t\t\t<SignOutButton />{' '}\r\n\t\t\t\t\t\t\t\t\t<Button color=\"secondary\" onClick={this.toggleSignOutModal}>Cancel</Button>\r\n\t\t\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</Navbar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default HivePageNavBar;\r\n","import React, { useState } from 'react';\r\nimport HivePageNavBar from './HivePageNavBar';\r\nimport Footer from './Footer'\r\nimport { Container,Jumbotron,Table, Button} from 'reactstrap';\r\n//Apollo imports\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { FIND_HIVE } from \"./graphql-operations\";\r\n\r\nfunction HivePage (props) {\r\n\tconst [hiveSearchText, setHiveSearchText] = useState(props.location.hiveTitle);\r\n\tconst {data: hiveData } = useQuery(FIND_HIVE, {\r\n\t\tvariables: { query: { name: hiveSearchText } }\r\n\t});\r\n\tconst hive = hiveData ? hiveData.hive : null;\r\n\tconst hiveID = hive ? hive.identifier : \"Needs Update\";\r\n\tconst hiveName = hive ? hive.name : null;\r\n\t\r\n\tconst report = hive ? hive.reports[0]  : null;\r\n\t\r\n\tconst temperature = report ? report.sensor_data.temp : \"0\";\r\n\tconst humidity = report ? report.sensor_data.humidity : \"0\";\r\n\tconst weight = report ? report.sensor_data.weight : \"0\";\r\n\t\r\n\tconst lastUpdated = report ? report.time_recorded : \"0000-00-00T00:00:00Z\";\r\n\tconst month = lastUpdated.substr(5, 2);\r\n\tconst day = lastUpdated.substr(8, 2);\r\n\tconst year = lastUpdated.substr(0, 2);\r\n\tconst hour = Number(lastUpdated.substr(11, 2)) === 0 ? \"12\":\r\n\t\t\t\t Number(lastUpdated.substr(11, 2)) > 12 ? String(Number(lastUpdated.substr(11, 2))-12) : lastUpdated.substr(11, 2);\r\n\tconst AMPM = Number(lastUpdated.substr(11, 2)) > 12 ? \"PM\" : \"AM\";\r\n\tconst minute = lastUpdated.substr(14, 2);\r\n\tconst second = lastUpdated.substr(17, 2);\r\n\t\r\n\tconst temp_status = (temperature >25 && temperature < 55) ? \"Good\" :\r\n\t\t\t\t\t\t(temperature >5 && temperature < 76) ? \"Warning\" : \"Critical\";\r\n\tconst temp_status_color = (temperature >25 && temperature < 55) ? \"green\" :\r\n\t\t\t\t\t\t\t  (temperature >5 && temperature < 76) ? \"gold\" : \"red\";\r\n\t\t\t\t\t\t\t  \r\n\tconst humidity_status = (humidity >35 && humidity < 55) ? \"Good\" :\r\n\t\t\t\t\t\t    (humidity >25 && humidity < 65) ? \"Warning\" : \"Critical\";\r\n\tconst humidity_status_color = (humidity >35 && humidity < 55) ? \"green\" :\r\n\t\t\t\t\t\t\t      (humidity >25 && humidity < 65) ? \"gold\" : \"red\";\r\n\r\n\tconst weight_status = (weight >50 && weight < 80) ? \"Good\" :\r\n\t\t\t\t\t\t  (weight >40 && weight < 130) ? \"Warning\" : \"Critical\";\r\n\tconst weight_status_color = (weight >50 && weight < 80) ? \"green\" :\r\n\t\t\t\t\t\t\t    (weight >40 && weight < 130) ? \"gold\" : \"red\";\t\r\n\r\n\tconst refresh = () => {\r\n\t\tsetHiveSearchText(props.location.hiveTitle);\r\n\t\twindow.location.reload(false);\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<HivePageNavBar />\r\n\t\t\t<Jumbotron>\r\n\t\t\t\t<h1 className=\"display-4\">{hiveName}</h1>\r\n\t\t\t\t<p>Hive ID: {hiveID}</p>\r\n\t\t\t\t<hr className=\"my-2\" />\r\n\t\t\t\t<h5>Last Updated: {month}/{day}/{year} at {hour}:{minute}:{second} {AMPM}  </h5>\r\n\t\t\t\t<Button color=\"dark\" onClick={() => refresh()}>Get Lastest Update</Button>\r\n\t\t\t</Jumbotron>\r\n\t\t\t<Container>\r\n\t\t\t\t<h3>Audio Information:</h3>\r\n\t\t\t\t<br />\r\n\t\t\t\t<h3>Temperature Sensors:</h3>\r\n\t\t\t\t<Table hover>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Location</th>\r\n\t\t\t\t\t\t\t<th>Current Reading</th>\r\n\t\t\t\t\t\t\t<th>Status</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Inside Hive</th>\r\n\t\t\t\t\t\t\t<td>{temperature}°F</td>\r\n\t\t\t\t\t\t\t<td style = {{color: temp_status_color}}>{temp_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Outside Hive</th>\r\n\t\t\t\t\t\t\t<td>{temperature}°F</td>\r\n\t\t\t\t\t\t\t<td style = {{color: temp_status_color}}>{temp_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t\t\r\n\t\t\t\t<h3>Humidity Sensors:</h3>\r\n\t\t\t\t<Table hover>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Location</th>\r\n\t\t\t\t\t\t\t<th>Current Reading</th>\r\n\t\t\t\t\t\t\t<th>Status</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Inside Hive</th>\r\n\t\t\t\t\t\t\t<td>{humidity}%</td>\r\n\t\t\t\t\t\t\t<td style = {{color: humidity_status_color}}>{humidity_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Outside Hive</th>\r\n\t\t\t\t\t\t\t<td>{humidity}%</td>\r\n\t\t\t\t\t\t\t<td style = {{color: humidity_status_color}}>{humidity_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t\t\r\n\t\t\t\t<h3>Weight Sensors:</h3>\r\n\t\t\t\t<Table hover>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Location</th>\r\n\t\t\t\t\t\t\t<th>Current Reading</th>\r\n\t\t\t\t\t\t\t<th>Status</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Top Left</th>\r\n\t\t\t\t\t\t\t<td>{weight} lbs</td>\r\n\t\t\t\t\t\t\t<td style = {{color: weight_status_color}}>{weight_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Top Right</th>\r\n\t\t\t\t\t\t\t<td>{weight} lbs</td>\r\n\t\t\t\t\t\t\t<td style = {{color: weight_status_color}}>{weight_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Bottom Left</th>\r\n\t\t\t\t\t\t\t<td>{weight} lbs</td>\r\n\t\t\t\t\t\t\t<td style = {{color: weight_status_color}}>{weight_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th scope=\"row\">Bottom Right</th>\r\n\t\t\t\t\t\t\t<td>{weight} lbs</td>\r\n\t\t\t\t\t\t\t<td style = {{color: weight_status_color}}>{weight_status}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t</Container>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default HivePage;","import * as React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\n// Apollo imports\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { CREATE_HIVE, FIND_HIVE, UPDATE_HIVE } from \"../graphql-operations\";\r\n\r\nexport default function GQLExamples() {\r\n  // Logic for Hive query\r\n  const [hiveSearchText, setHiveSearchText] = React.useState(\"5f988ba84e48809d447001e4\");\r\n  const { loading: hiveLoading, data: hiveData } = useQuery(FIND_HIVE, {\r\n    variables: { query: { _owner: hiveSearchText } }\r\n  });\r\n  const hive = hiveData ? hiveData.hive : null;\r\n  // Logic for update Hive mutation\r\n  const [updateHive, { loading: updatingHive }] = useMutation(UPDATE_HIVE);\r\n  const [newHiveNameText, setNewHiveNameText] = React.useState(\"Silly New Name\");\r\n  const updateHiveName = async () => {\r\n      if (!hive) return;\r\n      await updateHive({\r\n        variables: {\r\n          query: { name: hive.name },\r\n          set: { name: newHiveNameText }\r\n        }\r\n      });\r\n      setHiveSearchText(newHiveNameText);\r\n  };\r\n\r\n  // lgoic for create hive mutation\r\n  const [createHive, { loading: insertingHive }] = useMutation(CREATE_HIVE);\r\n  const [createHiveNameText, setCreateHiveNameText] = React.useState(\"\");\r\n  const createNewHive = async () => {\r\n    if (!createHiveNameText) return;\r\n    await createHive({\r\n      variables: {\r\n        data: {\r\n          _owner: \"5f988ba84e48809d447001e4\",\r\n          created: (new Date()).toISOString(),\r\n          identifier: \"madeWithGraphQL\",\r\n          name: createHiveNameText,\r\n          reports: {\r\n            link:[],\r\n            create:[]\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/\"><Button color=\"dark\">Back</Button></Link>\r\n      <h1>GraphQL Test</h1>\r\n      <div>\r\n        <div> Here we can query the Database </div>\r\n        <input\r\n          value={hiveSearchText}\r\n          onChange={e => setHiveSearchText(e.target.value)}\r\n          type=\"text\"\r\n        />\r\n        {!hiveLoading && !hive && <div>No hive with that name</div>}\r\n        {hive && !hiveLoading && (\r\n          <div>\r\n              <h2>{hive.name}</h2>\r\n              <div>ID: {hive.identifier}</div>\r\n              <div>Created: {hive.created}</div>\r\n              <div>Owner: {hive._owner}</div>\r\n              {hive.reports.length > 0 && <div>\r\n                <h4>Reports</h4>\r\n                <ol>\r\n                  {hive.reports.map((report) => (\r\n                        <li key={report._id}>{report._id}</li>\r\n                      )\r\n                    )\r\n                  }\r\n                </ol>\r\n              </div>}\r\n          </div>\r\n        )}\r\n      </div>\r\n        <div>\r\n          <div> Here we can modify the Database </div>\r\n          {!updatingHive && (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                value={newHiveNameText}\r\n                onChange={e => setNewHiveNameText(e.target.value)}\r\n              />\r\n              <button onClick={() => updateHiveName()}>\r\n                Change the Hive Name\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <div> Here we can Create a new Hive </div>\r\n          {!insertingHive && (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                value={createHiveNameText}\r\n                onChange={e => setCreateHiveNameText(e.target.value)}\r\n              />\r\n              <button onClick={() => createNewHive()}>\r\n                Create a new Hive\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n    </div>)\r\n};","import * as React from 'react';\r\nimport HomePage from './HomePage';\r\nimport AccountPage from './AccountPage';\r\nimport HivePage from './HivePage';\r\nimport GQLExamples from \"./Examples/graphqlExamples\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nexport default function BeeMinderApp() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route path=\"/MyAccount\" component={AccountPage} />\r\n        <Route path=\"/MyHive\" component={HivePage}/>\r\n        <Route path=\"/GQLExamples\" component={GQLExamples} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}","import React from 'react';\r\nimport {  Navbar, Container, Col } from 'reactstrap';\r\n\r\nfunction LoginPageNavBar() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Navbar color=\"warning\" light expand=\"md\">\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<h3>BeeMinder</h3>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t\t<Col/>\r\n\t\t\t\t</Container>\r\n\t\t\t</Navbar>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default LoginPageNavBar;\r\n","import React, { useState } from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useRealmApp } from \"./RealmApp\";\r\nimport LoginPageNavBar from \"./LoginPageNavBar\";\r\n\r\n//Imports for eye icon for show password\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { Card, CardBody, Spinner, Input, Button, Container, Col, Row} from \"reactstrap\";\r\n\r\nexport default function LoginScreen() {\r\n\t\r\n\tconst app = useRealmApp();\r\n\tconst eye = <FontAwesomeIcon icon={faEye} />;\r\n\t\r\n\tconst [pressed, setPressed] = React.useState(false);\r\n\t\r\n\t// Toggle between logging users in and registering new users\r\n\tconst [mode, setMode] = React.useState(\"login\");\r\n\tconst toggleMode = () => {\r\n\t\tsetMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\r\n\t};\r\n\t\r\n\t// Keep track of form input state\r\n\tconst [email, setEmail] = React.useState(\"\");\r\n\tconst [password, setPassword] = React.useState(\"\");\r\n\t\r\n\t// Keep track of input validation/errors\r\n\tconst [error, setError] = React.useState({});\r\n\t\r\n\t//Show/hide password status and function\r\n\tconst [passwordShown, setPasswordShown] = useState(false);\r\n\tconst togglePasswordVisiblity = () => {\r\n\t\tsetPasswordShown(passwordShown ? false : true);\r\n\t};\r\n\r\n\t// Whenever the mode changes, clear the form inputs\r\n\tReact.useEffect(() => {\r\n\t\tsetEmail(\"Joe@beeminder.com\");\r\n\t\tsetPassword(\"123bee\");\r\n\t\tsetError({});\r\n\t}, [mode]);\r\n\r\n\tconst [isLoggingIn, setIsLoggingIn] = React.useState(false);\r\n\tconst handleLogin = async () => {\r\n\t\tsetIsLoggingIn(true);\r\n\t\tsetError((e) => ({ ...e, password: null }));\r\n\t\ttry {\r\n\t\t\t// Call the logIn() method and pass it the emailPassword credentials.\r\n\t\tawait app.logIn(Realm.Credentials.emailPassword(email, password));\r\n\t\t} catch (err) {\r\n\t\t\thandleAuthenticationError(err, setError);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleRegistrationAndLogin = async () => {\r\n\t\t//TODO: get email validation, probably redo the form\r\n\t\tconst isValidEmailAddress = true;\r\n\t\tsetError((e) => ({ ...e, password: null }));\r\n\t\tif (isValidEmailAddress) {\r\n\t\t\ttry {\r\n\t\t\t\t// Register the user and, if successful, log them in\r\n\t\t\t\t// Create new emailPassword credentials by calling the registerUser() method.\r\n\t\t\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t\t\t\treturn await handleLogin();\r\n\t\t\t} catch (err) {\r\n\t\t\t\thandleAuthenticationError(err, setError);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsetError((err) => ({ ...err, email: \"Email is invalid.\" }));\r\n\t\t}\r\n\t};\r\n\r\n\tfunction isValidEmail() {\r\n\t\treturn true\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div style = {{backgroundColor: 'gray'}}>\r\n\t\t\t\t<LoginPageNavBar />\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col/>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t{isLoggingIn & error.password == null ? (\r\n\t\t\t\t\t\t\t\t<Spinner color=\"primary\" />\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t\t\t<CardBody>  \r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<h1>{mode === \"login\" ? \"Log In\" : \"Register Account\"}</h1>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\tEmail:\r\n\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"your.email@example.com\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetError((e) => ({ ...e, email: null }));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetEmail(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\t\t\t\t\t\tstate={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\terror.email ? \"error\" : isValidEmail(email) ? \"valid\" : \"none\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\terrorMessage={error.email}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\tPassword:\r\n\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype={passwordShown ? \"text\" : \"password\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {setPassword(e.target.value);}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\t\t\t\t\t\tstate={\r\n\t\t\t\t\t\t\t\t\t\t\t\t  error.password ? \"error\" : error.password ? \"valid\" : \"none\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\terrorMessage={error.password}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<p style={{\"fontSize\": 15}}><i position=\"absolute\" onClick={togglePasswordVisiblity}>{eye}</i>{' '}← Show Password</p>\r\n\t\t\t\t\t\t\t\t\t\t\t{error != null && pressed === true ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p style = {{\"color\" : \"red\"}}>Incorrect Email or Password</p>\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p style = {{\"color\" : \"white\", \"fontSize\":1}}>!</p>\t\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{mode === \"login\" ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button color=\"warning\" onClick={() => {handleLogin(); setPressed(true)}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLog In\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button color=\"warning\" onClick={() => {handleRegistrationAndLogin(); setPressed(true);}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRegister\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{mode === \"login\" ? \"Don't have an account?\" : \"Already have an account?\"}\r\n\t\t\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button color = \"secondary\" onClick={(e) => {e.preventDefault(); toggleMode();}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{mode === \"login\" ? \"Register now\" : \"Log in instead\"}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col/>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction handleAuthenticationError(err, setError) {\r\n\tconst { status, message } = parseAuthenticationError(err);\r\n\tconst errorType = message || status;\r\n\tswitch (errorType) {\r\n\t\tcase \"invalid username\":\r\n\t\t\tsetError((prevErr) => ({ ...prevErr, email: \"Invalid email address.\" }));\r\n\t\t\tbreak;\r\n\t\tcase \"invalid username/password\":\r\n\t\tcase \"invalid password\":\r\n\t\tcase \"401\":\r\n\t\t\tsetError((err) => ({ ...err, password: \"Incorrect password.\" }));\r\n\t\t\tbreak;\r\n\t\tcase \"name already in use\":\r\n\t\tcase \"409\":\r\n\t\t\tsetError((err) => ({ ...err, email: \"Email is already registered.\" }));\r\n\t\t\tbreak;\r\n\t\tcase \"password must be between 6 and 128 characters\":\r\n\t\tcase \"400\":\r\n\t\t\tsetError((err) => ({\r\n\t\t\t\t...err,\r\n\t\t\t\tpassword: \"Password must be between 6 and 128 characters.\",\r\n\t\t\t}));\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tsetError((err) => null);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction parseAuthenticationError(err) {\r\n\tconst parts = err.message.split(\":\");\r\n\tconst reason = parts[parts.length - 1].trimStart();\r\n\tif (!reason) return { status: \"\", message: \"\" };\r\n\tconst reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\r\n\tconst match = reason.match(reasonRegex);\r\n\tconst { status, message } = match?.groups ?? {};\r\n\treturn { status, message };\r\n}\r\n","import React from \"react\";\r\nimport { useRealmApp } from \"./RealmApp\";\r\nimport {\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\n\r\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\r\nconst createRealmApolloClient = (app) => {\r\n  const link = new HttpLink({\r\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\r\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\r\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\r\n    fetch: async (uri, options) => {\r\n      if (!app.currentUser) {\r\n        throw new Error(`Must be logged in to use the GraphQL API`);\r\n      }\r\n      // Refreshing a user's custom data also refreshes their access token\r\n      await app.currentUser.refreshCustomData();\r\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\r\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\r\n      return fetch(uri, options);\r\n    },\r\n  });\r\n\r\n  const cache = new InMemoryCache();\r\n\r\n  return new ApolloClient({ link, cache });\r\n};\r\n\r\nexport default function RealmApolloProvider({ children }) {\r\n   // Create an ``ApolloClient`` object that connects to your app.\r\n   const app = useRealmApp();\r\n   const [client, setClient] = React.useState(createRealmApolloClient(app));\r\n   React.useEffect(() => {\r\n    setClient(createRealmApolloClient(app));\r\n   }, [app]);\r\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n}\r\n","// React\r\nimport React from 'react';\r\nimport ReadcDOM from 'react-dom';\r\n// import * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport BeeMinderApp from './BeeMinderApp';\r\n\r\nimport LoginScreen from \"./components/LoginScreen\";\r\nimport RealmApolloProvider from \"./components/RealmApolloProvider\";\r\nimport { useRealmApp, RealmAppProvider } from \"./components/RealmApp\";\r\n\r\n\r\nexport const APP_ID = \"beeminderdb-nyofv\";\r\n\r\nconst RequireLoggedInUser = ({ children }) => {\r\n  // Only render children if there is a logged in user.\r\n  const app = useRealmApp();\r\n  return app.currentUser ? children : <LoginScreen />;\r\n};\r\n\r\nReadcDOM.render(\r\n\t<RealmAppProvider appId={APP_ID}>\r\n\t\t<RequireLoggedInUser>\r\n\t\t\t<RealmApolloProvider>\r\n\t\t\t\t<BeeMinderApp/>\r\n\t\t\t</RealmApolloProvider>\r\n\t\t</RequireLoggedInUser>\r\n\t</RealmAppProvider>,\r\n\tdocument.getElementById(\"root\")\r\n  );\r\n\r\n// // Get a valid Realm user access token to authenticate requests\r\n// async function getValidAccessToken() {\r\n// \tif (!app.currentUser) {\r\n// \t  // If no user is logged in, log in an anonymous user\r\n// \t  await app.logIn(Realm.Credentials.anonymous());\r\n// \t} else {\r\n// \t  // The logged in user's access token might be stale.\r\n// \t  // Refreshing custom data also refreshes the access token.\r\n// \t  await app.currentUser.refreshCustomData();\r\n// \t}\r\n// \t// Get a valid access token for the current user\r\n// \tconst { accessToken } = app.currentUser;\r\n// \treturn accessToken\r\n// }\r\n\r\n// const client = new ApolloClient({\r\n// \tlink: new HttpLink({\r\n// \t\turi: graphql_url,\r\n// \t\t// We define a custom fetch handler for the Apollo client that lets us authenticate GraphQL requests.\r\n// \t\t// The function intercepts every Apollo HTTP request and adds an Authorization header with a valid\r\n// \t\t// access token before sending the request.\r\n// \t\tfetch: async (uri, options) => {\r\n// \t\t\tconst accessToken = await getValidAccessToken();\r\n// \t\t\toptions.headers.Authorization = `Bearer ${accessToken}`;\r\n// \t\t\treturn fetch(uri, options);\r\n// \t\t},\r\n// \t}),\r\n// \tcache: new InMemoryCache()\r\n// });\r\n\r\n// render(\r\n// \t<ApolloProvider client={client}>\r\n// \t\t<BeeMinderApp/>\r\n// \t</ApolloProvider>,\r\n// \tdocument.getElementById('root')\r\n// );\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}